@startuml
'https://plantuml.com/sequence-diagram

left to right direction

'package utils {
interface FoodContainer{
    + putFood(food : Eatable[])
    + removeFood() : Eatable[]
}
abstract class Character {
    - name : String
    - age : int
    + getName() : String
    + getAge() : int
}
interface Eatable{
    + eated(name : String)
    + getCalories() : int
}

exception EmptyTableException
exception FatManException
exception SadManException
exception NotEnoughMoneyException
enum ReflectionType{
    CROOKED
    NORMAL
    FLATTENED
    WIDE
}
enum Sex{
        MALE
        FEMALE
    }
'}

'package core{
class Product{
    -name : String
    -price : int
    +getPrice() : int
}
class Shop{
    -name : String
    -isOpen : bool
    -catalog : Product[]
    +isOpen() : bool
    +addToCatalog(Products : Product[])
}
class Dog implements Scary{
    -name : String
    +bark()
}
class Amusement{
    -name : String
    -makesHappy : bool
    +makesHappy() : bool
}
class Table implements FoodContainer{
    - foodContainer : Eatable[]
    - food[] : Eatable
    + hasFood() : bool
    + eatFood()
}
class Tray implements FoodContainer{
    - containsFood : bool
    - foodContainer : Eatable[]
    - food[] : Eatable
}
interface Scary{
    isScary() : bool
}
class Music {
 - title : String
 - isPlaying : bool
 + play()
 + stop()
 + isPlaying() : bool
 + getTitle() : String
}
class Food implements Eatable{
- calories : int
    - name : String
}
class Drink implements Eatable {
    - calories : int
    - name : String
}
class Mirror{
+ reflect() : ReflectionType
}
class Shorty extends Character{
        - static maxCalories : int
        - sex : Sex
        - shop : Shop
        - money : int
        - isFat : bool
        - totalCalories : int
        - isHungry : bool
        - keepsFit : bool
        - isScared : bool
        + eat()
        + getScared(obj : Scary)
        + isScared() : bool
        + isHungry() : bool
        + look(mirror: Mirror)
        + dance(music : Music)
        + laugh()
        + seat(table : Table)
        + enter(shop : shop)
        + leaveShop()
        + buyProduct()
        + useAmusement(amusement : Amusement)
    }
class Waiter extends Character{
    + takeTray(tray : Tray)
    + run()
}
ReflectionType --* Mirror
Music --> Shorty
Eatable --> Waiter
Eatable --> Shorty
Eatable --* Tray
Eatable --* Table
Mirror --> Shorty
Table --> Shorty
Tray --> Waiter
Sex --* Shorty
Product --* Shorty
Shop --> Shorty
Dog --> Shorty

'}
@enduml
'Я понимаю текст примерно так: я выделяю 7 сущностей, которые собираюсь реализовать в виде классов:
класс еды Food
клаcс напитка Drink
класс Человека Person
человек может смотреть, есть, танцевать и сидеть
класс официанта Waiter
официант может носить еду и бегать
класс музыки Music
музыка может играть(удивительно)
И класс стола, где надо сидеть Table

при этом класс официанта наследуется от класса человека
и класс напитка наследуется от класса еды

все объекты наследуются от абстрактного класса Entity, который содержит поле имени сущности, метод создания сущности и метод взаимодействия с именем сущности
для взаимодействия с классами предусмотрены следующие интерфейсы:
FoodInterface - взаимодействия с едой (еда естся)
PersonInterface - взаимодействия с полями класса Person
взаимодействует с полями sitting eating looking dancing
MirrorInterface - взаимодействия с зеркалом - зеркало отражает и возвращает какое-либо отражение
для типа отражений определен ENUM Reflection, содержащий типы отражений

